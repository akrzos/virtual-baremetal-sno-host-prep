---
# vm-host-network tasks
- name: set nic to use
  set_fact:
    network_ip_interface: "{{public_ip_interface}}"

- name: set nic override when it's defined
  set_fact:
    network_ip_interface: "{{hostvars[inventory_hostname].network1_nic}}"
  when: hostvars[inventory_hostname].network1_nic is defined

- name: debug
  debug:
    msg: "{{network_ip_interface}}"

- name: Clean lab interfaces
  shell: |
    /root/clean-interfaces.sh --nuke

- name: Stop and disable iptables
  systemd:
    state: stopped
    enabled: false
    name: iptables

- name: Configure Dns
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
  - src: 99-disable-nm-dns.conf
    dest: /etc/NetworkManager/conf.d/99-disable-nm-dns.conf
  - src: resolv.conf.j2
    dest: /etc/resolv.conf

- name: Set ip_forward sysctl (ipv6)
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    sysctl_file: /etc/sysctl.d/ipv6.conf
    state: present
    reload: true
  loop:
  - name: net.ipv6.conf.all.forwarding
    value: "1"
  - name: net.ipv6.conf.all.disable_ipv6
    value: "0"
  when: public_ip_network | ansible.netcommon.ipv6

- name: Restart NetworkManager for DNS changes
  systemd:
    state: restarted
    name: NetworkManager

- name: setup bridge for public ip interface (ipv4)
  nmcli:
    type: bridge
    conn_name: "{{ public_bridge_name }}"
    ifname: "{{ public_bridge_name }}"
    ip4: "{{ public_ip_network | next_nth_usable(public_ip_network_node_start  +  hostvars[inventory_hostname].offset) }}/{{ public_ip_network_prefix }}"
    state: present
  when: public_ip_network | ansible.netcommon.ipv4

- name: setup bridge for public ip interface (ipv6)
  nmcli:
    type: bridge
    conn_name: "{{ public_bridge_name }}"
    ifname: "{{ public_bridge_name }}"
    ip6: "{{ public_ip_network | next_nth_usable(public_ip_network_node_start  +  hostvars[inventory_hostname].offset) }}/{{ public_ip_network_prefix }}"
    state: present
  when: public_ip_network | ansible.netcommon.ipv6

- name: delete slave interface if exist
  command: bash -c "nmcli con delete {{ network_ip_interface }}-slave "
  ignore_errors: yes

- name: bind interface with bridge
  command: bash -c "nmcli con add type bridge-slave con-name {{ network_ip_interface }}-slave ifname {{ network_ip_interface }} master {{ public_bridge_name }} "

- name: disable old interface
  command: bash -c "nmcli con down {{network_ip_interface}}"
  ignore_errors: yes

- name: enable bridge & slave
  command: bash -c "nmcli con up {{ public_bridge_name }} && nmcli con up  {{network_ip_interface}}-slave "
